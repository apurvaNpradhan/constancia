/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteRouteImport } from './routes/_protected/route'
import { Route as AuthRouteRouteImport } from './routes/_auth/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProtectedHomeRouteImport } from './routes/_protected/home'
import { Route as ProtectedJournalsIndexRouteImport } from './routes/_protected/journals/index'
import { Route as AuthSignUpIndexRouteImport } from './routes/_auth/sign-up/index'
import { Route as AuthSignInIndexRouteImport } from './routes/_auth/sign-in/index'
import { Route as ProtectedNotesIdRouteImport } from './routes/_protected/notes/$id'
import { Route as ProtectedNotesAllIndexRouteImport } from './routes/_protected/notes/all/index'

const ProtectedRouteRoute = ProtectedRouteRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRouteRoute = AuthRouteRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedHomeRoute = ProtectedHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedJournalsIndexRoute = ProtectedJournalsIndexRouteImport.update({
  id: '/journals/',
  path: '/journals/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const AuthSignUpIndexRoute = AuthSignUpIndexRouteImport.update({
  id: '/sign-up/',
  path: '/sign-up/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const AuthSignInIndexRoute = AuthSignInIndexRouteImport.update({
  id: '/sign-in/',
  path: '/sign-in/',
  getParentRoute: () => AuthRouteRoute,
} as any)
const ProtectedNotesIdRoute = ProtectedNotesIdRouteImport.update({
  id: '/notes/$id',
  path: '/notes/$id',
  getParentRoute: () => ProtectedRouteRoute,
} as any)
const ProtectedNotesAllIndexRoute = ProtectedNotesAllIndexRouteImport.update({
  id: '/notes/all/',
  path: '/notes/all/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof ProtectedHomeRoute
  '/notes/$id': typeof ProtectedNotesIdRoute
  '/sign-in': typeof AuthSignInIndexRoute
  '/sign-up': typeof AuthSignUpIndexRoute
  '/journals': typeof ProtectedJournalsIndexRoute
  '/notes/all': typeof ProtectedNotesAllIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof ProtectedHomeRoute
  '/notes/$id': typeof ProtectedNotesIdRoute
  '/sign-in': typeof AuthSignInIndexRoute
  '/sign-up': typeof AuthSignUpIndexRoute
  '/journals': typeof ProtectedJournalsIndexRoute
  '/notes/all': typeof ProtectedNotesAllIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/home': typeof ProtectedHomeRoute
  '/_protected/notes/$id': typeof ProtectedNotesIdRoute
  '/_auth/sign-in/': typeof AuthSignInIndexRoute
  '/_auth/sign-up/': typeof AuthSignUpIndexRoute
  '/_protected/journals/': typeof ProtectedJournalsIndexRoute
  '/_protected/notes/all/': typeof ProtectedNotesAllIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/notes/$id'
    | '/sign-in'
    | '/sign-up'
    | '/journals'
    | '/notes/all'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/notes/$id'
    | '/sign-in'
    | '/sign-up'
    | '/journals'
    | '/notes/all'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_protected'
    | '/_protected/home'
    | '/_protected/notes/$id'
    | '/_auth/sign-in/'
    | '/_auth/sign-up/'
    | '/_protected/journals/'
    | '/_protected/notes/all/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/home': {
      id: '/_protected/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof ProtectedHomeRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/journals/': {
      id: '/_protected/journals/'
      path: '/journals'
      fullPath: '/journals'
      preLoaderRoute: typeof ProtectedJournalsIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_auth/sign-up/': {
      id: '/_auth/sign-up/'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_auth/sign-in/': {
      id: '/_auth/sign-in/'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof AuthSignInIndexRouteImport
      parentRoute: typeof AuthRouteRoute
    }
    '/_protected/notes/$id': {
      id: '/_protected/notes/$id'
      path: '/notes/$id'
      fullPath: '/notes/$id'
      preLoaderRoute: typeof ProtectedNotesIdRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
    '/_protected/notes/all/': {
      id: '/_protected/notes/all/'
      path: '/notes/all'
      fullPath: '/notes/all'
      preLoaderRoute: typeof ProtectedNotesAllIndexRouteImport
      parentRoute: typeof ProtectedRouteRoute
    }
  }
}

interface AuthRouteRouteChildren {
  AuthSignInIndexRoute: typeof AuthSignInIndexRoute
  AuthSignUpIndexRoute: typeof AuthSignUpIndexRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthSignInIndexRoute: AuthSignInIndexRoute,
  AuthSignUpIndexRoute: AuthSignUpIndexRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

interface ProtectedRouteRouteChildren {
  ProtectedHomeRoute: typeof ProtectedHomeRoute
  ProtectedNotesIdRoute: typeof ProtectedNotesIdRoute
  ProtectedJournalsIndexRoute: typeof ProtectedJournalsIndexRoute
  ProtectedNotesAllIndexRoute: typeof ProtectedNotesAllIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedHomeRoute: ProtectedHomeRoute,
  ProtectedNotesIdRoute: ProtectedNotesIdRoute,
  ProtectedJournalsIndexRoute: ProtectedJournalsIndexRoute,
  ProtectedNotesAllIndexRoute: ProtectedNotesAllIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
